{{- if .Values.knativeDeploy }}
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
{{- if .Values.service.name }}
  name: {{ .Values.service.name }}
{{- else }}
  name: {{ template "fullname" . }}
{{- end }}
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    networking.knative.dev/visibility: cluster-local
{{- if .Values.service.labels }}
{{ toYaml .Values.service.labels | indent 4 }}
{{- end }}
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/minScale: {{ .Values.knative.minScale | quote }}
        autoscaling.knative.dev/maxScale: {{ .Values.knative.maxScale | quote }}
        autoscaling.knative.dev/target: {{ .Values.knative.concurrencyTarget | quote }}
{{- if .Values.podsLabels }}
      labels:
{{ toYaml .Values.podsLabels | indent 8 }}
{{- end }}
    spec:
      containers:
      - image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        ports:
        - containerPort: {{ .Values.service.internalPort }}
        env:
        - name: POSTGRES_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.psql.username }}.{{ .Values.database.psql.name }}.credentials.postgresql.acid.zalan.do
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.psql.username }}.{{ .Values.database.psql.name }}.credentials.postgresql.acid.zalan.do
              key: password
        - name: POSTGRES_DATABASE
          value: {{ .Values.database.psql.database }}
        - name: POSTGRES_HOST
          value: {{ .Values.database.psql.hostname }}.{{ .Release.Namespace }}.svc.cluster.local
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRESQL_URL
          value: postgres://$(POSTGRES_USERNAME):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):$(POSTGRES_PORT)/$(POSTGRES_DATABASE)
{{- range $pkey, $pval := .Values.env }}
        - name: {{ $pkey }}
          value: {{ quote $pval }}
{{- end }}
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessProbe.probePath | default .Values.probePath }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.livenessProbe.probePath | default .Values.probePath }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
{{- end }}